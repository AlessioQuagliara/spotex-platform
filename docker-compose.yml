version: '3.8'

services:
  # ==================== INFRASTRUCTURE ====================
  
  postgres:
    image: postgres:15-alpine
    container_name: spotex-postgres
    environment:
      POSTGRES_DB: spotex_platform
      POSTGRES_USER: spotex
      POSTGRES_PASSWORD: ${DB_PASSWORD:-spotex_dev_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U spotex"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: spotex-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ==================== BACKEND SERVICES ====================

  backend-api:
    build:
      context: .
      dockerfile: ./backend-api/Dockerfile
      target: dev
    container_name: spotex-backend-api
    environment:
      NODE_ENV: development
      PORT: 3000
      DATABASE_URL: postgresql://spotex:${DB_PASSWORD:-spotex_dev_password}@postgres:5432/spotex_platform
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET:-dev_jwt_secret_change_in_production}
      JWT_EXPIRES_IN: 7d
    volumes:
      - ./backend-api:/app/backend-api
      - ./shared:/app/shared
      - /app/backend-api/node_modules
      - /app/shared/node_modules
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: npm run dev

  auth-service:
    build:
      context: .
      dockerfile: ./auth-service/Dockerfile
      target: dev
    container_name: spotex-auth-service
    environment:
      NODE_ENV: development
      PORT: 3001
      DATABASE_URL: postgresql://spotex:${DB_PASSWORD:-spotex_dev_password}@postgres:5432/spotex_platform
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET:-dev_jwt_secret_change_in_production}
      JWT_EXPIRES_IN: 7d
      BCRYPT_ROUNDS: 10
    volumes:
      - ./auth-service:/app/auth-service
      - ./shared:/app/shared
      - /app/auth-service/node_modules
      - /app/shared/node_modules
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: npm run dev

  ticket-service:
    build:
      context: .
      dockerfile: ./ticket-service/Dockerfile
      target: dev
    container_name: spotex-ticket-service
    environment:
      NODE_ENV: development
      PORT: 3002
      DATABASE_URL: postgresql://spotex:${DB_PASSWORD:-spotex_dev_password}@postgres:5432/spotex_platform
      REDIS_URL: redis://redis:6379
    volumes:
      - ./ticket-service:/app/ticket-service
      - ./shared:/app/shared
      - /app/ticket-service/node_modules
      - /app/shared/node_modules
    ports:
      - "3002:3002"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: npm run dev

  deployment-service:
    build:
      context: .
      dockerfile: ./deployment-service/Dockerfile
      target: dev
    container_name: spotex-deployment-service
    environment:
      NODE_ENV: development
      PORT: 3003
      DATABASE_URL: postgresql://spotex:${DB_PASSWORD:-spotex_dev_password}@postgres:5432/spotex_platform
      REDIS_URL: redis://redis:6379
      AUTO_DEPLOY_API_URL: ${AUTO_DEPLOY_API_URL:-https://api.autodeploy.com}
      AUTO_DEPLOY_API_KEY: ${AUTO_DEPLOY_API_KEY}
    volumes:
      - ./deployment-service:/app/deployment-service
      - ./shared:/app/shared
      - /app/deployment-service/node_modules
      - /app/shared/node_modules
    ports:
      - "3003:3003"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: npm run dev

  domain-service:
    build:
      context: .
      dockerfile: ./domain-service/Dockerfile
      target: dev
    container_name: spotex-domain-service
    environment:
      NODE_ENV: development
      PORT: 3004
      DATABASE_URL: postgresql://spotex:${DB_PASSWORD:-spotex_dev_password}@postgres:5432/spotex_platform
      REDIS_URL: redis://redis:6379
      DOMAIN_PROVIDER_API_URL: ${DOMAIN_PROVIDER_API_URL}
      DOMAIN_PROVIDER_API_KEY: ${DOMAIN_PROVIDER_API_KEY}
    volumes:
      - ./domain-service:/app/domain-service
      - ./shared:/app/shared
      - /app/domain-service/node_modules
      - /app/shared/node_modules
    ports:
      - "3004:3004"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: npm run dev

  # ==================== FRONTEND SERVICES ====================

  frontend-public:
    build:
      context: .
      dockerfile: ./frontend-public/Dockerfile
    container_name: spotex-frontend-public
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_API_URL: http://nginx/api
    volumes:
      - ./frontend-public:/app/frontend-public
      - ./shared:/app/shared
      - /app/frontend-public/node_modules
      - /app/shared/node_modules
    ports:
      - "3005:3000"
    command: npm run dev

  frontend-agency:
    build:
      context: .
      dockerfile: ./frontend-agency/Dockerfile
    container_name: spotex-frontend-agency
    environment:
      NODE_ENV: development
      VITE_API_URL: http://localhost/api
    volumes:
      - ./frontend-agency:/app/frontend-agency
      - ./shared:/app/shared
      - /app/frontend-agency/node_modules
      - /app/shared/node_modules
    ports:
      - "5174:5173"
    command: npm run dev

  frontend-admin:
    build:
      context: .
      dockerfile: ./frontend-admin/Dockerfile
    container_name: spotex-frontend-admin
    environment:
      NODE_ENV: development
      VITE_API_URL: http://localhost/api
    volumes:
      - ./frontend-admin:/app/frontend-admin
      - ./shared:/app/shared
      - /app/frontend-admin/node_modules
      - /app/shared/node_modules
    ports:
      - "5175:5173"
    command: npm run dev

  # ==================== REVERSE PROXY ====================

  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: spotex-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend-api
      - frontend-public
      - frontend-agency
      - frontend-admin
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  default:
    name: spotex-network
